generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mastery {
  id             Int @id @default(autoincrement())
  championId     Int
  championLevel  Int
  championPoints Int

  summonerSnapshot   SummonerSnapshot @relation(fields: [summonerSnapshotId], references: [id])
  summonerSnapshotId Int
}

model Match {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime
  matchId                String   @unique
  mode                   String
  position               Position
  championId             Int
  win                    Boolean
  pentaKills             Int
  kills                  Int
  deaths                 Int
  assists                Int
  visionScore            Int
  damageDealtToChampions Int
  damageDealtToBuildings Int

  summonerSnapshot   SummonerSnapshot @relation(fields: [summonerSnapshotId], references: [id])
  summonerSnapshotId Int
}

model SummonerSnapshot {
  id                  Int       @id @default(autoincrement())
  puuid               String
  summonerId          String
  summonerName        String
  summonerLevel       Int
  summonerProfileIcon Int
  tier                String?
  rank                String?
  clashRole           Position?
  predictedFirstPick  Int?
  predictedSecondPick Int?
  predictedThirdPick  Int?
  masteries           Mastery[]
  matches             Match[]

  analyticsQuery   AnalyticsQuery @relation(fields: [analyticsQueryId], references: [id])
  analyticsQueryId String
}

model AnalyticsQuery {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  depth     Int
  type      QueryType
  complete  Boolean            @default(false)
  snapshots SummonerSnapshot[]
}

enum Position {
  FILL
  TOP
  JUNGLE
  MID
  BOT
  SUPPORT
}

enum QueryType {
  CLASH
  PLAYER
}
